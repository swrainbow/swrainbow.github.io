---
title: vue-cli or create-react-app
date: 2024-02-06 23:02:21
tags: [vue]
categories: [vue]
---

# why?
研究脚手架的意义： 做性能优化，
提升前端研发效能
![](https://strainbow.oss-cn-hangzhou.aliyuncs.com/20240227091511.png)
1. 自动化 项目重复代码拷贝/git操作
2. 标准化 git flow
3. 数据化 可量化 过程时间

## 执行原理
![](https://strainbow.oss-cn-hangzhou.aliyuncs.com/20240227092414.png)
- 在terminal输入vue create test-app
- 在环境变量中找到vue命令 链接到实际文件vue.js
- 执行vue.js 解析command / options
- 执行完毕 退出

### 问题
- why 安装@vue/clil 会添加命令vue
- 为什么vue指向一个js文件， 我们确可以直接通过vue命令执行

#！/usr/bin/env node 在js文件中声明这句可以 直接通过./执行脚本
### 创建一个自定义软连接
1. 创建一个test.js 脚本， chmod 777 test.js
2. echo $PATH 找到node环境变量
3. 进入bin目录 ln -s deerland /Users/swrainbow/deerland/cli/test.js
4. 测试
![](https://strainbow.oss-cn-hangzhou.aliyuncs.com/20240227095251.png)

![](https://strainbow.oss-cn-hangzhou.aliyuncs.com/20240227095829.png)

## 脚手架开发流程
- 创建npm项目
- 创建脚手架入口文件，最上方添加#/usr/bin/env node
- 配置package.json 添加bin属性
- 编写脚手架代码
- 将脚手架发布到npm

### 脚手架开发难点
1. 分包： 将复杂的系统拆分成若干个模块
2. 命令注册
```
vue create
vue add
vue invoke
```
3. 参数解析
```
vue command [options] <params>
```
4. options 全称和简写 --version / -V
5. 带params的options： --path /User/sw/Desktop/vue-test
6. 帮助文档
### 脚手架本地link流程
链接本地脚手架
```bash
cd your-cli-dir
npm link
```

链接本地库文件：
```bash
cd your-lib-dir
npm link
cd your-cli-dir
npm link your-linb
```
取消链接本地库文件
```
cd your-lib-dir
npm unlink
cd your-cli-dir
npm unlink your-lib
rm -rf node_modules
npm install -S your lib
```

